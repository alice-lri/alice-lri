name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  build-and-attach:
    if: github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Tag Version: $VERSION"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_ARCHS_LINUX: x86_64
          CIBW_ARCHS_WINDOWS: AMD64
          CIBW_BUILD_VERBOSITY: 1
        with:
          package-dir: './python'

      - name: Upload wheels as workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl
          retention-days: 7

      - name: Find wheel file
        id: find_wheel
        shell: bash
        run: echo "WHEEL_PATH=$(ls wheelhouse/*.whl)" >> $GITHUB_ENV

      - name: Get wheel filename
        id: wheel_name
        shell: bash
        run: echo "WHEEL_NAME=$(basename $WHEEL_PATH)" >> $GITHUB_ENV

      - name: Create C++ tarball
        shell: bash
        run: |
          CPP_TARBALL_NAME="alice-lri-${{ env.VERSION }}-cpp-lib.tar.gz"
          tar -czf "$CPP_TARBALL_NAME" -C cpp .  # Adjust path if your C++ code is in a subfolder like "cpp"
          echo "CPP_TARBALL_PATH=$CPP_TARBALL_NAME" >> $GITHUB_ENV

      - name: Create draft release via GitHub CLI
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo $GH_TOKEN | gh auth login --with-token
          gh release create "v${{ env.VERSION }}" \
            --title "Release v${{ env.VERSION }}" \
            --notes "Automated draft release for version v${{ env.VERSION }}" \
            --draft

      - name: Attach wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.WHEEL_PATH }}
          asset_name: ${{ env.WHEEL_NAME }}
          asset_content_type: application/octet-stream

      - name: Attach C++ tarball to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.CPP_TARBALL_PATH }}
          asset_name: ${{ env.CPP_TARBALL_NAME }}
          asset_content_type: application/gzip

  publish-pypi:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist/

      - name: Publish wheels to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
